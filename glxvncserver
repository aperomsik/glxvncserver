#!/usr/bin/env perl
#
#  vncdserver: like vnc4server, but with Xdummy, to support GLX
#
#  based on the ubuntu version of vnc4server, which is
#  
#  Copyright (C) 2004-2006 Ola Lundqvist <opal@debian.org>
#  Copyright (C) 2002-2005 RealVNC Ltd.
#  Copyright (C) 1999 AT&T Laboratories Cambridge.  All Rights Reserved.
#
#  xdummy-related changes Copyright (C) 2015 by Aaron Peromsik.
#
#  This is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This software is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this software; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,
#  USA.
#

#
# vncserver - wrapper script to start an X VNC server.
#

# This file was heavily edited by Ola Lundqvist <opal@debian.org> using
# options from vnc package.
# Most modifications are written by Marcus.Brinkmann@ruhr-uni-bochum.de and
# now incorporated by Ola.

# Please report all errors to Debian and not to ORL.

#
# First make sure we're operating in a sane environment.
#

&SanityCheck();

#
# Global variables.  You may want to configure some of these for your site.
#

$geometry = "1024x768";
$depth = 16;
$vncJavaFiles = (((-d "/usr/share/vnc-java") && "/usr/share/vnc-java") ||
		 ((-d "/usr/share/vnc/classes") && "/usr/share/vnc/classes") ||
                 ((-d "/usr/local/vnc/classes") && "/usr/local/vnc/classes"));

$vncUserDir = "$ENV{HOME}/.vnc";
$xauthorityFile = "$ENV{XAUTHORITY}" || "$ENV{HOME}/.Xauthority";

$xconfFile = "$vncUserDir/xorg.dummy.conf";

$defaultXStartup
    = ("#!/bin/sh\n\n".
       "# Uncomment the following two lines for normal desktop:\n".
       "# unset SESSION_MANAGER\n".
       "# exec /etc/X11/xinit/xinitrc\n\n".
       "[ -x /etc/vnc/xstartup ] && exec /etc/vnc/xstartup\n".
       "[ -r \$HOME/.Xresources ] && xrdb \$HOME/.Xresources\n".
       "xsetroot -solid grey\n".
       "vncconfig -iconic &\n".
       "x-terminal-emulator -geometry 80x24+10+10 -ls -title \"\$VNCDESKTOP Desktop\" &\n".
       "x-window-manager &\n");

######## Adding configuration possibility ################
$Config_file = "/etc/vnc.conf";
&ReadConfigFile();
$Config_file = "$ENV{HOME}/.vncrc";
&ReadConfigFile();

if (!$XFConfigPath) {
  foreach ("/etc/X11/xorg.conf", "/etc/X11/XF86Config-4", "/etc/X11/XF86Config" ){
    $XFConfigPath = $_;
    last if ( -e $XFConfigPath );
  }
}
if (!$fontPath) {
  &ReadXFConfigFont;
}
if (!$fontPath) {
  $fontPath = "/usr/X11R6/lib/X11/fonts/Type1/,".
              "/usr/X11R6/lib/X11/fonts/Speedo/,".
              "/usr/X11R6/lib/X11/fonts/misc/,".
              "/usr/X11R6/lib/X11/fonts/75dpi/,".
              "/usr/X11R6/lib/X11/fonts/100dpi/,".
              "/usr/share/fonts/X11/misc/,".
      	      "/usr/share/fonts/X11/Type1/,".
              "/usr/share/fonts/X11/75dpi/,".
              "/usr/share/fonts/X11/100dpi/"
}
if (!$colorPath) {
  &ReadXFConfigColor;
}
if (!$colorPath) {
  foreach ("/etc/X11/rgb", "/usr/share/X11/rgb", "/usr/X11R6/lib/X11/rgb"){
      $colorPath = $_;
      last if ( -e "${colorPath}.txt" );
  }
}

##########################################################

$vncUserDirUnderTmp = ($vncUserDir =~ m|^/tmp/.+|) ? 1 : 0;
$xstartup = ($vncUserDirUnderTmp) ?
  "$ENV{HOME}/.vncstartup" : "$vncUserDir/xstartup";
$xstartup = $vncStartup if ($vncStartup);

unless ($xauthorityFile) {
    if ($vncUserDirUnderTmp) {
        $xauthorityFile = "$vncUserDir/.Xauthority";
    } else {
        $xauthorityFile = "$ENV{HOME}/.Xauthority";
    }
}

chop($host = `uname -n`);


# Check command line options

&ParseOptions("-geometry",1,"-depth",1,"-pixelformat",1,"-name",1,"-kill",1,
	      "-help",0,"-h",0,"--help",0,
	      "-clean",0, "-fp",1,
	      "-alwaysshared",0, "-nevershared",0,
	      "-httpport",1,"-basehttpport",1);

&Usage() if ($opt{'-help'} || $opt{'-h'} || $opt{'--help'});

&Kill() if ($opt{'-kill'});

$useClasses = 0;
if (defined $vncJavaFiles) {
  if(-d $vncJavaFiles) {
      $useClasses = 1;
  }
}

# Uncomment this line if you want default geometry, depth and pixelformat
# to match the current X display:
# &GetXDisplayDefaults();

if ($opt{'-geometry'}) {
    $geometry = $opt{'-geometry'};
}
if ($opt{'-depth'}) {
    $depth = $opt{'-depth'};
    $pixelformat = "";
}
if ($opt{'-pixelformat'}) {
    $pixelformat = $opt{'-pixelformat'};
}

if ($opt{'-fp'}) {
    @fontPathElements = split(/\s*,\s*/, "$opt{'-fp'}");

    $fontPath = '';

    foreach $i (0.."$#fontPathElements") {
       $tempFontPath = $fontPathElements[$i];
       if ($tempFontPath !~ m!^[^/]*/[^/]*:\d+$!) {
           $tempFontPath =~ s/:unscaled$//;
           if (-r "$tempFontPath/fonts.dir") {
               $fontPath .= "$fontPathElements[$i],";
           }
       } else {
           $fontPath .= "$fontPathElements[$i],";
       }
    }
    chop $fontPath;
}

&CheckGeometryAndDepth();

# Create the user's vnc directory if necessary.

if (!(-e $vncUserDir)) {
    if (!mkdir($vncUserDir,0755)) {
	die "$prog: Could not create $vncUserDir.\n";
    }
}

($z,$z,$mode) = stat("$vncUserDir");
if (!-d _ || !-o _ || ($vncUserDirUnderTmp && ($mode & 0777) != 0700)) {
    die "$prog: Wrong type or access mode of $vncUserDir.\n";
}

# Make sure the user has a password.

($z,$z,$mode) = stat("$vncUserDir/passwd");
if (!(-e "$vncUserDir/passwd") || ($mode & 077)) {
    warn "\nYou will require a password to access your desktops.\n\n";
    system("vncpasswd $vncUserDir/passwd"); 
    if (($? >> 8) != 0) {
	exit 1;
    }
}

# Find display number.

if ((@ARGV > 0) && ($ARGV[0] =~ /^:(\d+)$/)) {
    $displayNumber = $1;
    shift(@ARGV);
    if (!&CheckDisplayNumber($displayNumber)) {
	die "A VNC server is already running as :$displayNumber\n";
    }
} elsif ((@ARGV > 0) && ($ARGV[0] !~ /^-/)) {
    &Usage();
} else {
    $displayNumber = &GetDisplayNumber();
}

$vncPort = 5900 + $displayNumber;

$desktopLog = "$vncUserDir/$host:$displayNumber.log";
unlink($desktopLog);
$vncLog = "$vncUserDir/vnc-$host:$displayNumber.log";
unlink($vncLog);    

writeDummyXconf() if ! -r $xconfFile;

# Make an X server cookie - use mcookie
$cookie = `/usr/bin/mcookie`;
open (XAUTH, "|xauth -f $xauthorityFile source -");
print XAUTH "add $host:$displayNumber . $cookie\n";
print XAUTH "add $host/unix:$displayNumber . $cookie\n";
close XAUTH;

if ($opt{'-name'}) {
    $desktopName = $opt{'-name'};
} else {
    $desktopName = "$host:$displayNumber ($ENV{USER})";
}

# Now start the X VNC Server

$xcmd = "Xorg :$displayNumber";
$xcmd .= " -noreset +extension GLX +extension RANDR +extension RENDER";
$xcmd .= " -config $xconfFile";

$vcmd = "x11vnc -many";
$vcmd .= " -desktop " . &quotedString($desktopName);
if ($useClasses) {
  $vcmd .= " -httpd $vncJavaFiles";
  print ("Found $vncJavaFiles for http connections.\n");
  if ($opt{'-httpport'}) {
    $vcmd .= " -httpport $opt{'-httpport'}";
    print ("Listening to $opt{'-httpport'} for http connections.\n");
  }
  elsif ($opt{'-basehttpport'}) {
    my $v = $opt{'-basehttpport'} + $displayNumber;
    print ("Listening to $v for http connections.\n");
    $vcmd .= " -httpport $v";
  }
}
$xcmd .= " -auth $xauthorityFile";
$vcmd .= " -auth $xauthorityFile";
# if ($geometry) {
#   if ($#$geometry==-1) {
#     $xcmd .= " -geometry $geometry";
#   } else {
#     foreach $i (0..$#$geometry) {
#       $xcmd .= " -geometry $geometry->[$i]";
#     }
#   }
# }
$xcmd .= " -depth $depth" if ($depth);
$xcmd .= " -pixelformat $pixelformat" if ($pixelformat);
$vcmd .= " -rfbwait 30000";
$vcmd .= " -rfbauth $vncUserDir/passwd";
$vcmd .= " -rfbport $vncPort";
# $cmd .= " -pn";

# Add font path and color database stuff here, e.g.:
#
# $cmd .= " -fp /usr/lib/X11/fonts/misc/,/usr/lib/X11/fonts/75dpi/";
# $cmd .= " -co /usr/lib/X11/rgb";
#
$xcmd .= " -fp $fontPath" if ($fontPath);
# $xcmd .= " -co $colorPath" if ($colorPath);
$vcmd .= " -alwaysshared" if ($opt{'-alwaysshared'});
$vcmd .= " -nevershared" if ($opt{'-nevershared'});

foreach $arg (@ARGV) {
    $xcmd .= " " . &quotedString($arg);
}
$xcmd .= " >> " . &quotedString($desktopLog) . " 2>&1";

# Run $cmd and record the process ID.

$pidFile = "$vncUserDir/$host:$displayNumber.pid";
system("$xcmd & echo \$! >$pidFile");

# Give Xorg a chance to start up

sleep(3); 

warn "\nNew '$desktopName' desktop is $host:$displayNumber\n\n";

# Create the user's xstartup script if necessary.

if (!(-e "$xstartup")) {
    warn "Creating default startup script $xstartup\n";
    open(XSTARTUP, ">$xstartup");
    print XSTARTUP $defaultXStartup;
    close(XSTARTUP);
    chmod 0755, "$xstartup";
}

# Run the X startup script.

warn "Starting applications specified in $xstartup\n";
warn "Log file is $desktopLog\n\n";

# If the unix domain socket exists then use that (DISPLAY=:n) otherwise use
# TCP (DISPLAY=host:n)

if (-e "/tmp/.X11-unix/X$displayNumber" ||
    -e "/usr/spool/sockets/X11/$displayNumber")
{
    $ENV{DISPLAY}= ":$displayNumber";
} else {
    $ENV{DISPLAY}= "$host:$displayNumber";
}
$ENV{VNCDESKTOP}= $desktopName;
    
system("$xstartup >> " . &quotedString($desktopLog) . " 2>&1 &");
warn "Running $vcmd >> $vncLog\n";
system("$vcmd >> " . &quotedString($vncLog) . " 2>&1 &");
    
exit;

############################ Debian functions #################################
# I thank Manoj for the code below.
#
# ReadConfigFile reads in a config file and sets variables according to it.
#

sub ReadConfigFile
{
  open(CONFIG, "$Config_file") || return;
  my $lineno = 0;
  while (<CONFIG>) {
      chomp;
      $lineno++;
      s/\#.*//og;
      next if /^\s*$/og;
      $_ .= ";" unless /;\s*$/;
      if (/^\s*([^=]+)\s*=\s*(\S.*)$/o) {
          my $ret = eval "$1=$2";
          if ($@) {
              print STDERR "Error parsing config file $Config_file!\n";
              print STDERR "$lineno:$_\n";
          }
      }
  }
}

sub ReadXFConfigFont
{
  open(CONFIG, "$XFConfigPath") || return;
  my $lineno = 0;
  while (<CONFIG>) {
      chomp;
      $lineno++;
      s/\#.*//og;
      next if /^\s*$/og;
      if (/^\s*FontPath\s*"(\S.*)"\s*$/o) {
          $fontPath .= "," if $fontPath;
          $fontPath .= $1;
      }
  }
}

sub ReadXFConfigColor
{
  open(CONFIG, "$XFConfigPath") || return;
  my $lineno = 0;
  while (<CONFIG> && !$colorPath) {
      chomp;
      $lineno++;
      s/\#.*//og;
      next if /^\s*$/og;
      if (/^\s*RgbPath\s*"(\S.*)"\s*$/o) {
          $colorPath = $1;
      }
  }
}


########## End of debian functions ###########


###############################################################################
#
# CheckGeometryAndDepth simply makes sure that the geometry and depth values
# are sensible.
#

sub CheckGeometry
{
   my $geometry=shift;
   if ($geometry =~ /^(\d+)x(\d+)$/) {
	$width = $1; $height = $2;

	if (($width<1) || ($height<1)) {
	    die "$prog: geometry $geometry is invalid\n";
	}

	while (($width % 4)!=0) {
	    $width = $width + 1;
	}

	while (($height % 2)!=0) {
	    $height = $height + 1;
	}

	$geometry = "${width}x$height";
    } else {
	die "$prog: geometry $geometry is invalid\n";
    }

}

sub CheckGeometryAndDepth
{
	if ($geometry) {
	  if ($#$geometry==-1) {
	    &CheckGeometry($geometry);
	  } else {
		 foreach $i (0..$#$geometry) {
			&CheckGeometry($geometry->[$i]);
		 }
	  }
	}
    if (($depth < 8) || ($depth > 32)) {
	die "Depth must be between 8 and 32\n";
    }
}


#
# GetDisplayNumber gets the lowest available display number.  A display number
# n is taken if something is listening on the VNC server port (5900+n) or the
# X server port (6000+n).
#

sub GetDisplayNumber
{
    foreach $n (1..99) {
	if (&CheckDisplayNumber($n)) {
	    return $n+0; # Bruce Mah's workaround for bug in perl 5.005_02
	}
    }
    
    die "$prog: no free display number on $host.\n";
}


#
# CheckDisplayNumber checks if the given display number is available.  A
# display number n is taken if something is listening on the VNC server port
# (5900+n) or the X server port (6000+n).
#

sub CheckDisplayNumber
{
    local ($n) = @_;

    socket(S, $AF_INET, $SOCK_STREAM, 0) || die "$prog: socket failed: $!\n";
    eval 'setsockopt(S, &SOL_SOCKET, &SO_REUSEADDR, pack("l", 1))';
    if (!bind(S, pack('S n x12', $AF_INET, 6000 + $n))) {
	close(S);
	return 0;
    }
    close(S);

    socket(S, $AF_INET, $SOCK_STREAM, 0) || die "$prog: socket failed: $!\n";
    eval 'setsockopt(S, &SOL_SOCKET, &SO_REUSEADDR, pack("l", 1))';
    if (!bind(S, pack('S n x12', $AF_INET, 5900 + $n))) {
	close(S);
	return 0;
    }
    close(S);

    if (-e "/tmp/.X$n-lock") {
	warn "\nWarning: $host:$n is taken because of /tmp/.X$n-lock\n";
	warn "Remove this file if there is no X server $host:$n\n";
	return 0;
    }

    if (-e "/tmp/.X11-unix/X$n") {
	warn "\nWarning: $host:$n is taken because of /tmp/.X11-unix/X$n\n";
	warn "Remove this file if there is no X server $host:$n\n";
	return 0;
    }

    if (-e "/usr/spool/sockets/X11/$n") {
	warn("\nWarning: $host:$n is taken because of ".
             "/usr/spool/sockets/X11/$n\n");
	warn "Remove this file if there is no X server $host:$n\n";
	return 0;
    }

    return 1;
}


#
# GetXDisplayDefaults uses xdpyinfo to find out the geometry, depth and pixel
# format of the current X display being used.  If successful, it sets the
# options as appropriate so that the X VNC server will use the same settings
# (minus an allowance for window manager decorations on the geometry).  Using
# the same depth and pixel format means that the VNC server won't have to
# translate pixels when the desktop is being viewed on this X display (for
# TrueColor displays anyway).
#

sub GetXDisplayDefaults
{
    local (@lines, @matchlines, $width, $height, $defaultVisualId, $i,
	   $red, $green, $blue);

    $wmDecorationWidth = 4;	# a guess at typical size for window manager
    $wmDecorationHeight = 24;	# decoration size

    return if (!defined($ENV{DISPLAY}));

    @lines = `xdpyinfo 2>/dev/null`;

    return if ($? != 0);

    @matchlines = grep(/dimensions/, @lines);
    if (@matchlines) {
	($width, $height) = ($matchlines[0] =~ /(\d+)x(\d+) pixels/);

	$width -= $wmDecorationWidth;
	$height -= $wmDecorationHeight;

	$geometry = "${width}x$height";
    }

    @matchlines = grep(/default visual id/, @lines);
    if (@matchlines) {
	($defaultVisualId) = ($matchlines[0] =~ /id:\s+(\S+)/);

	for ($i = 0; $i < @lines; $i++) {
	    if ($lines[$i] =~ /^\s*visual id:\s+$defaultVisualId$/) {
		if (($lines[$i+1] !~ /TrueColor/) ||
		    ($lines[$i+2] !~ /depth/) ||
		    ($lines[$i+4] !~ /red, green, blue masks/))
		{
		    return;
		}
		last;
	    }
	}

	return if ($i >= @lines);

	($depth) = ($lines[$i+2] =~ /depth:\s+(\d+)/);
	($red,$green,$blue)
	    = ($lines[$i+4]
	       =~ /masks:\s+0x([0-9a-f]+), 0x([0-9a-f]+), 0x([0-9a-f]+)/);

	$red = hex($red);
	$green = hex($green);
	$blue = hex($blue);

	if ($red > $blue) {
	    $red = int(log($red) / log(2)) - int(log($green) / log(2));
	    $green = int(log($green) / log(2)) - int(log($blue) / log(2));
	    $blue = int(log($blue) / log(2)) + 1;
	    $pixelformat = "rgb$red$green$blue";
	} else {
	    $blue = int(log($blue) / log(2)) - int(log($green) / log(2));
	    $green = int(log($green) / log(2)) - int(log($red) / log(2));
	    $red = int(log($red) / log(2)) + 1;
	    $pixelformat = "bgr$blue$green$red";
	}
    }
}


#
# quotedString returns a string which yields the original string when parsed
# by a shell.
#

sub quotedString
{
    local ($in) = @_;

    $in =~ s/\'/\'\"\'\"\'/g;

    return "'$in'";
}


#
# removeSlashes turns slashes into underscores for use as a file name.
#

sub removeSlashes
{
    local ($in) = @_;

    $in =~ s|/|_|g;

    return "$in";
}


#
# Usage
#

sub Usage
{
    die("VNC4 server\n".
       "\n".
       "Usage: $prog [<OPTIONS>] [:<DISPLAY#>]\n".
       "       $prog -kill :<DISPLAY#>\n".
       "\n".
       "<OPTIONS> are Xvnc4 options, or:\n".
       "\n".
       "        -name <DESKTOP-NAME>\n".
       "        -depth <DEPTH>\n".
       "        -geometry <WIDTH>x<HEIGHT>\n".
       "        -httpport number\n".
       "        -basehttpport number\n".
       "        -alwaysshared\n".
       "        -nevershared\n".
       "        -pixelformat rgb<NNN>\n".
       "        -pixelformat bgr<NNN>\n".
       "        <Xvnc4-options>...\n".
       "\n".
       "See vnc4server and Xvnc4 manual pages for more information.\n");
}


#
# Kill
#

sub Kill
{
    $opt{'-kill'} =~ s/(:\d+)\.\d+$/$1/; # e.g. turn :1.0 into :1

    if ($opt{'-kill'} =~ /^:\d+$/) {
	$pidFile = "$vncUserDir/$host$opt{'-kill'}.pid";
    } else {
	if ($opt{'-kill'} !~ /^$host:/) {
	    die "\nCan't tell if $opt{'-kill'} is on $host\n".
		"Use -kill :<number> instead\n\n";
	}
	$pidFile = "$vncUserDir/$opt{'-kill'}.pid";
    }

    if (! -r $pidFile) {
	die "\nCan't find file $pidFile\n".
	    "You'll have to kill the Xvnc4 process manually\n\n";
    }

    $SIG{'HUP'} = 'IGNORE';
    chop($pid = `cat $pidFile`);
    warn "Killing Xorg process ID $pid\n";
    system("kill $pid");
    unlink $pidFile;
    exit;
}


#
# ParseOptions takes a list of possible options and a boolean indicating
# whether the option has a value following, and sets up an associative array
# %opt of the values of the options given on the command line. It removes all
# the arguments it uses from @ARGV and returns them in @optArgs.
#

sub ParseOptions
{
    local (@optval) = @_;
    local ($opt, @opts, %valFollows, @newargs);

    while (@optval) {
	$opt = shift(@optval);
	push(@opts,$opt);
	$valFollows{$opt} = shift(@optval);
    }

    @optArgs = ();
    %opt = ();

    arg: while (defined($arg = shift(@ARGV))) {
	foreach $opt (@opts) {
	    if ($arg eq $opt) {
		push(@optArgs, $arg);
		if ($valFollows{$opt}) {
		    if (@ARGV == 0) {
			&Usage();
		    }
		    if ($opt{$opt}) {
		       # Convert scalar to array if necessary
		       $opt{$opt} = [$opt{$opt}] if $#{$opt{$opt}}==-1;
		       push(@{$opt{$opt}},shift(@ARGV));
		    } else {
		       $opt{$opt} = shift(@ARGV);
		    }
		    push(@optArgs, $opt{$opt});
		} else {
		    $opt{$opt} = 1;
		}
		next arg;
	    }
	}
	push(@newargs,$arg);
    }

    @ARGV = @newargs;
}


#
# Routine to make sure we're operating in a sane environment.
#

sub SanityCheck
{
    local ($cmd);

    #
    # Get the program name
    #

    ($prog) = ($0 =~ m|([^/]+)$|);

    #
    # Check we have all the commands we'll need on the path.
    #

 cmd:
    foreach $cmd ("uname","xauth","Xvnc4","vncpasswd") {
	for (split(/:/,$ENV{PATH})) {
	    if (-x "$_/$cmd") {
		next cmd;
	    }
	}
	die "$prog: couldn't find \"$cmd\" on your PATH.\n";
    }

    #
    # Check the HOME environment variable is set
    #

    if (!defined($ENV{HOME})) {
	die "$prog: The HOME environment variable is not set.\n";
    }
    chdir($ENV{HOME});

    #
    # Find socket constants. 'use Socket' is a perl5-ism, so we wrap it in an
    # eval, and if it fails we try 'require "sys/socket.ph"'.  If this fails,
    # we just guess at the values.  If you find perl moaning here, just
    # hard-code the values of AF_INET and SOCK_STREAM.  You can find these out
    # for your platform by looking in /usr/include/sys/socket.h and related
    # files.
    #

    chop($os = `uname`);
    chop($osrev = `uname -r`);

    eval 'use Socket';
    if ($@) {
	eval 'require "sys/socket.ph"';
	if ($@) {
	    if (($os eq "SunOS") && ($osrev !~ /^4/)) {
		$AF_INET = 2;
		$SOCK_STREAM = 2;
	    } else {
		$AF_INET = 2;
		$SOCK_STREAM = 1;
	    }
	} else {
	    $AF_INET = &AF_INET;
	    $SOCK_STREAM = &SOCK_STREAM;
	}
    } else {
	$AF_INET = &AF_INET;
	$SOCK_STREAM = &SOCK_STREAM;
    }
}

sub writeDummyXconf {

open XCONF, ">$xconfFile" || die "can't write $xconfFile";

print STDERR "Writing $xconfFile. Check Modes line for desired display modes.\n";

print XCONF << 'DEFAULTXCONF';
  
# This xorg configuration file is meant to be used by xpra
# to start a dummy X11 server.
# For details, please see:
# https://xpra.org/Xdummy.html

Section "ServerFlags"
  Option "DontVTSwitch" "true"
  Option "AllowMouseOpenFail" "true"
  Option "PciForceNone" "true"
  Option "AutoEnableDevices" "false"
  Option "AutoAddDevices" "false"
EndSection

Section "InputDevice"
  Identifier "dummy_mouse"
  Option "CorePointer" "true"
  Driver "void"
EndSection

Section "InputDevice"
  Identifier "dummy_keyboard"
  Option "CoreKeyboard" "true"
  Driver "void"
EndSection

Section "Device"
  Identifier "dummy_videocard"
  Driver "dummy"
  Option "ConstantDPI" "true"
  #VideoRam 4096000
  VideoRam 256000
  #VideoRam 192000
EndSection

Section "Monitor"
  Identifier "dummy_monitor"
  HorizSync   5.0 - 1000.0
  VertRefresh 5.0 - 200.0
  #This can be used to get a specific DPI, but only for the default resolution:
  #DisplaySize 508 317
  #NOTE: the highest modes will not work without increasing the VideoRam
  # for the dummy video card.
  # Modeline "32768x32768" 15226.50 32768 35800 39488 46208 32768 32771 32781 32953
  # Modeline "32768x16384" 7516.25 32768 35544 39192 45616 16384 16387 16397 16478
  # Modeline "16384x8192" 2101.93 16384 16416 24400 24432 8192 8390 8403 8602
  # Modeline "8192x4096" 424.46 8192 8224 9832 9864 4096 4195 4202 4301
  # Modeline "5496x1200" 199.13 5496 5528 6280 6312 1200 1228 1233 1261
  # Modeline "5280x1080" 169.96 5280 5312 5952 5984 1080 1105 1110 1135
  # Modeline "5280x1200" 191.40 5280 5312 6032 6064 1200 1228 1233 1261
  # Modeline "5120x3200" 199.75 5120 5152 5904 5936 3200 3277 3283 3361
  # Modeline "4800x1200" 64.42 4800 4832 5072 5104 1200 1229 1231 1261
  # Modeline "3840x2880" 133.43 3840 3872 4376 4408 2880 2950 2955 3025
  # Modeline "3840x2560" 116.93 3840 3872 4312 4344 2560 2622 2627 2689
  # Modeline "3840x2048" 91.45 3840 3872 4216 4248 2048 2097 2101 2151
  # Modeline "3840x1080" 100.38 3840 3848 4216 4592 1080 1081 1084 1093
  # Modeline "3600x1200" 106.06 3600 3632 3984 4368 1200 1201 1204 1214
  # Modeline "3288x1080" 39.76 3288 3320 3464 3496 1080 1106 1108 1135
  # Modeline "2048x2048" 49.47 2048 2080 2264 2296 2048 2097 2101 2151
  # Modeline "2048x1536" 80.06 2048 2104 2312 2576 1536 1537 1540 1554
  # Modeline "2560x1600" 47.12 2560 2592 2768 2800 1600 1639 1642 1681
  # Modeline "2560x1440" 42.12 2560 2592 2752 2784 1440 1475 1478 1513
  # Modeline "1920x1440" 69.47 1920 1960 2152 2384 1440 1441 1444 1457
  # Modeline "1920x1200" 26.28 1920 1952 2048 2080 1200 1229 1231 1261
  Modeline "1920x1080" 23.53 1920 1952 2040 2072 1080 1106 1108 1135
  Modeline "1680x1050" 20.08 1680 1712 1784 1816 1050 1075 1077 1103
  Modeline "1600x1200" 22.04 1600 1632 1712 1744 1200 1229 1231 1261
  Modeline "1600x900" 33.92 1600 1632 1760 1792 900 921 924 946
  # Modeline "1440x900" 30.66 1440 1472 1584 1616 900 921 924 946
  ModeLine "1366x768" 72.00 1366 1414 1446 1494  768 771 777 803
  Modeline "1280x1024" 31.50 1280 1312 1424 1456 1024 1048 1052 1076
  Modeline "1280x800" 24.15 1280 1312 1400 1432 800 819 822 841
  Modeline "1280x768" 23.11 1280 1312 1392 1424 768 786 789 807
  Modeline "1360x768" 24.49 1360 1392 1480 1512 768 786 789 807
  Modeline "1024x768" 18.71 1024 1056 1120 1152 768 786 789 807
  Modeline "768x1024" 19.50 768 800 872 904 1024 1048 1052 1076


  #common resolutions for android devices (both orientations):
  Modeline "800x1280" 25.89 800 832 928 960 1280 1310 1315 1345
  Modeline "1280x800" 24.15 1280 1312 1400 1432 800 819 822 841
  Modeline "720x1280" 30.22 720 752 864 896 1280 1309 1315 1345
  Modeline "1280x720" 27.41 1280 1312 1416 1448 720 737 740 757
  # Modeline "768x1024" 24.93 768 800 888 920 1024 1047 1052 1076
  # Modeline "1024x768" 23.77 1024 1056 1144 1176 768 785 789 807
  # Modeline "600x1024" 19.90 600 632 704 736 1024 1047 1052 1076
  # Modeline "1024x600" 18.26 1024 1056 1120 1152 600 614 617 631
  # Modeline "536x960" 16.74 536 568 624 656 960 982 986 1009
  # Modeline "960x536" 15.23 960 992 1048 1080 536 548 551 563
  # Modeline "600x800" 15.17 600 632 688 720 800 818 822 841
  # Modeline "800x600" 14.50 800 832 880 912 600 614 617 631
  # Modeline "480x854" 13.34 480 512 560 592 854 873 877 897
  # Modeline "848x480" 12.09 848 880 920 952 480 491 493 505
  # Modeline "480x800" 12.43 480 512 552 584 800 818 822 841
  # Modeline "800x480" 11.46 800 832 872 904 480 491 493 505
  #resolutions for android devices (both orientations)
  #minus the status bar
  #38px status bar (and width rounded up)
  # Modeline "800x1242" 25.03 800 832 920 952 1242 1271 1275 1305
  # Modeline "1280x762" 22.93 1280 1312 1392 1424 762 780 783 801
  # Modeline "720x1242" 29.20 720 752 856 888 1242 1271 1276 1305
  # Modeline "1280x682" 25.85 1280 1312 1408 1440 682 698 701 717
  # Modeline "768x986" 23.90 768 800 888 920 986 1009 1013 1036
  # Modeline "1024x730" 22.50 1024 1056 1136 1168 730 747 750 767
  # Modeline "600x986" 19.07 600 632 704 736 986 1009 1013 1036
  # Modeline "1024x562" 17.03 1024 1056 1120 1152 562 575 578 591
  # Modeline "536x922" 16.01 536 568 624 656 922 943 947 969
  # Modeline "960x498" 14.09 960 992 1040 1072 498 509 511 523
  # Modeline "600x762" 14.39 600 632 680 712 762 779 783 801
  # Modeline "800x562" 13.52 800 832 880 912 562 575 578 591
  # Modeline "480x810" 12.59 480 512 552 584 810 828 832 851
  # Modeline "848x442" 11.09 848 880 920 952 442 452 454 465
  # Modeline "480x762" 11.79 480 512 552 584 762 779 783 801
EndSection

Section "Screen"
  Identifier "dummy_screen"
  Device "dummy_videocard"
  Monitor "dummy_monitor"
  DefaultDepth 24
  SubSection "Display"
    Viewport 0 0
    Depth 24
    #Modes "32768x32768" "32768x16384" "16384x8192" "8192x4096" "5120x3200" "3840x2880" "3840x2560" "3840x2048" "2048x2048" "2560x1600" "1920x1440" "1920x1200" "1920x1080" "1600x1200" "1680x1050" "1600x900" "1400x1050" "1440x900" "1280x1024" "1366x768" "1280x800" "1024x768" "1024x600" "800x600" "320x200"
    #Modes "5120x3200" "3840x2880" "3840x2560" "3840x2048" "2048x2048" "2560x1600" "1920x1440" "1920x1200" "1920x1080" "1600x1200" "1680x1050" "1600x900" "1400x1050" "1440x900" "1280x1024" "1366x768" "1280x800" "1024x768" "1024x600" "800x600" "320x200"
    Modes "1600x900" "1920x1080" "1600x1200" "1680x1050" 
    #Virtual 32000 32000
    #Virtual 16384 8192
    #Virtual 8192 4096
    #Virtual 5120 3200
  EndSubSection
EndSection

Section "ServerLayout"
  Identifier   "dummy_layout"
  Screen       "dummy_screen"
  InputDevice  "dummy_mouse"
  InputDevice  "dummy_keyboard"
EndSection

DEFAULTXCONF

close XCONF;

}
